package org.fbi.ltf.processor;

import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.fbi.linking.codec.dataformat.SeperatedTextDataFormat;
import org.fbi.linking.processor.ProcessorException;
import org.fbi.linking.processor.standprotocol10.Stdp10ProcessorRequest;
import org.fbi.linking.processor.standprotocol10.Stdp10ProcessorResponse;
import org.fbi.ltf.domain.cbs.T6091Request.CbsTia6091;
import org.fbi.ltf.enums.TxnRtnCode;
import org.fbi.ltf.helper.MybatisFactory;
import org.fbi.ltf.repository.dao.FsLtfAcctDealMapper;
import org.fbi.ltf.repository.dao.FsLtfAcctInfoMapper;
import org.fbi.ltf.repository.dao.FsLtfTicketInfoMapper;
import org.fbi.ltf.repository.dao.FsLtfVchOutMapper;
import org.fbi.ltf.repository.dao.common.FsAcctInfoMapper;
import org.fbi.ltf.repository.model.*;
import org.fbi.ltf.repository.model.common.FsLtfOutAcct;
import org.fbi.ltf.repository.model.common.FsLtfRestAcct;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * ODSB装载数据交易
 * Created by Thinkpad on 2015/11/3.
 */
public class T6091Processor extends AbstractTxnProcessor {
    private Logger logger = LoggerFactory.getLogger(this.getClass());
    private SqlSessionFactory sqlSessionFactory = null;
    private SqlSession session = null;

    @Override
    protected void doRequest(Stdp10ProcessorRequest request, Stdp10ProcessorResponse response) throws ProcessorException, IOException {
        String hostTxnsn = request.getHeader("serialNo");

        CbsTia6091 tia = new CbsTia6091();
        try {
            SeperatedTextDataFormat dataFormat = new SeperatedTextDataFormat(tia.getClass().getPackage().getName());
            tia = (CbsTia6091) dataFormat.fromMessage(new String(request.getRequestBody(), "GBK"), "CbsTia6091");
        } catch (Exception e) {
            logger.error("[sn=" + hostTxnsn + "] " + "特色业务平台请求报文解析错误.", e);
            throw new RuntimeException(e);
        }
        //业务逻辑处理
        CbsRtnInfo cbsRtnInfo = null;
        try {
            cbsRtnInfo = processTxn(tia);
//            特色平台响应
            response.setHeader("rtnCode", cbsRtnInfo.getRtnCode().getCode());
            String cbsRespMsg = cbsRtnInfo.getRtnMsg();
 /*           response.setHeader("rtnCode", "0000");
            String cbsRespMsg ="6|10137198661031331000800027,1,600001|10137198661031331000800027,2,600002|10137198661031331000800027,3,600003|10137198661031331000800027,4,600004|10137198661031331000800027,5,600005|10137198661031331000800027,6,600006|";
*/
            response.setResponseBody(cbsRespMsg.getBytes(response.getCharacterEncoding()));
        } catch (Exception e) {
            logger.error("[sn=" + hostTxnsn + "] " + "交易处理异常.", e);
            throw new RuntimeException("交易处理异常", e);
        }
    }

    private CbsRtnInfo processTxn(CbsTia6091 tia) throws Exception {
        CbsRtnInfo cbsRtnInfo = new CbsRtnInfo();
        try {
            sqlSessionFactory = MybatisFactory.ORACLE.getInstance();
            session = sqlSessionFactory.openSession();
            session.getConnection().setAutoCommit(false);

            //本地处理
            //1、查看相对应的项目代码是否存在记录
            String operdate= tia.getTxnDate();
            List<FsLtfVchOut> posList = this.selectDiffOut(tia.getTxnDate());
            List<FsLtfAcctInfo> outList = this.selectPosInfo(tia.getTxnDate());
            int res = -1;
            if(posList.size() > 0 || outList.size()>0){
                if(posList.size()>0){
                    for(int i=0; i<posList.size();i++){
                        res=  this.updatePosByOrder(operdate,posList.get(i).getOrderNo());
                        if(res == -1){
                            session.rollback();
                            cbsRtnInfo.setRtnCode(TxnRtnCode.TXN_EXECUTE_FAILED);
                            cbsRtnInfo.setRtnMsg("更新网银表对账结果出错");
                            break;
                        }
                    }
                }
                if (outList.size()>0){
                    for(int i=0; i<outList.size();i++){
                        res=  this.updateOutByOrder(operdate, outList.get(i).getOrderNo());
                        if(res == -1){
                            session.rollback();
                            cbsRtnInfo.setRtnCode(TxnRtnCode.TXN_EXECUTE_FAILED);
                            cbsRtnInfo.setRtnMsg("更新本地out表对账结果出错");
                            break;

                        }
                    }
                }
            }
            String flag = "0";   // 0-单号不存在  1-单号存在
            // 以上
            if ((posList.size() > 0) || (outList.size() > 0)) {
                cbsRtnInfo.setRtnCode(TxnRtnCode.TXN_EXECUTE_FAILED);
                cbsRtnInfo.setRtnMsg("本地记录与网银记录单号不一致");
                return cbsRtnInfo;

            }else{
                cbsRtnInfo.setRtnCode(TxnRtnCode.TXN_EXECUTE_FAILED);
                cbsRtnInfo.setRtnMsg("本地记录与网银记录单号一致");
            }
            if (cbsRtnInfo.getRtnCode().equals("0000")) {
                List<FsLtfOutAcct> unEqualList = this.selectUnEqual(operdate);
                FsLtfAcctDealMapper fsLtfAcctDealMapper = session.getMapper(FsLtfAcctDealMapper.class);
                if(unEqualList.size()>0){
                    // 账务不平 写入对账不平结果
                    for(int i=0; i<unEqualList.size();i++){
                        res=  this.updateOutByOrder(operdate, unEqualList.get(i).getOrderno());
                        if (res ==-1){
                            session.rollback();
                            cbsRtnInfo.setRtnCode(TxnRtnCode.TXN_EXECUTE_FAILED);
                            cbsRtnInfo.setRtnMsg("更新本地out对账结果出错");
                            return cbsRtnInfo;

                        }
                        res=  this.updatePosByOrder(operdate, unEqualList.get(i).getOrderno());
                        if (res ==-1){
                            session.rollback();
                            cbsRtnInfo.setRtnCode(TxnRtnCode.TXN_EXECUTE_FAILED);
                            cbsRtnInfo.setRtnMsg("更新网银对账结果出错");
                            return cbsRtnInfo;
                        }

                    }
                    session.commit();
                }else{
                    // 账务平 需要写入每个账号需要转入多少钱
                    List<FsLtfRestAcct>  acctResultList= this.selectAcctResult(tia.getTxnDate());
                    for(int i=0; i<acctResultList.size();i++){
                        FsLtfAcctDeal  fsLtfAcctDeal =new FsLtfAcctDeal();
//                            fsLtfAcctDeal.setcheckflag("1");  // 对账结束结果平
                        // 企业号
                        fsLtfAcctDeal.setInOrgCode(acctResultList.get(i).getAreacode());
                        // 转入账号
                        fsLtfAcctDeal.setInAcctNo(acctResultList.get(i).getAreabnak_no());
                        // 金额
                        fsLtfAcctDeal.setAcctMoney(acctResultList.get(i).getTotalamt());

                        fsLtfAcctDealMapper.insert(fsLtfAcctDeal);
                    }
                    session.commit();
                }
                cbsRtnInfo.setRtnCode(TxnRtnCode.TXN_EXECUTE_SECCESS);
            }

            return cbsRtnInfo;
        } catch (SQLException e) {
            session.rollback();
            cbsRtnInfo.setRtnCode(TxnRtnCode.TXN_EXECUTE_FAILED);
            cbsRtnInfo.setRtnMsg("数据库处理异常");
            return cbsRtnInfo;
        } finally {
            if (session != null) {
                session.close();
            }
        }
    }


    //生成CBS响应报文
    private String generateCbsRespMsg(List<FsLtfTicketInfo> infoList) {
       /* CbsToa6090 cbsToa = new CbsToa6090();
        cbsToa.setItemNum(String.valueOf(infoList.size()));
        List<CbsToa6090Item> cbsToaItems = new ArrayList<>();
        for(FsLtfTicketInfo info : infoList){
            CbsToa6090Item item = new CbsToa6090Item();
*//*            item.(info.getTicketNo());
            item.setBillNo(info.getBillNo());
            item.setTxnAmt(info.getAmount().toString());
            item.setOperNo(info.getOperid());*//*
            cbsToaItems.add(item);
        }
        cbsToa.setItems(cbsToaItems);
        String cbsRespMsg = "";
        Map<String, Object> modelObjectsMap = new HashMap<String, Object>();
        modelObjectsMap.put(cbsToa.getClass().getName(), cbsToa);
        SeperatedTextDataFormat cbsDataFormat = new SeperatedTextDataFormat(cbsToa.getClass().getPackage().getName());
        try {
            cbsRespMsg = (String) cbsDataFormat.toMessage(modelObjectsMap);
        } catch (Exception e) {
            throw new RuntimeException("特色平台报文转换失败.", e);
        }*/
        return "";
    }

    //查询分票数据
    private List<FsLtfVchOut> selectOutInfo(String operDate) {
        FsLtfVchOutExample example = new FsLtfVchOutExample();
        example.createCriteria().andOprDateEqualTo(operDate);
        FsLtfVchOutMapper mapper = session.getMapper(FsLtfVchOutMapper.class);
        List<FsLtfVchOut> infoList = mapper.selectByExample(example);
        return infoList;
    }

    private List<FsLtfOutAcct> selectDistinctOutInfo(String operDate) {
        FsAcctInfoMapper mapper = session.getMapper(FsAcctInfoMapper.class);
        List<FsLtfOutAcct> infoList = mapper.selectDistinctOutList(operDate);
        return infoList;
    }
    private List<FsLtfOutAcct> selectDistinctAcctInfo(String operDate) {
        FsAcctInfoMapper mapper = session.getMapper(FsAcctInfoMapper.class);
        List<FsLtfOutAcct> infoList = mapper.selectDistinctAcctInfoList(operDate);
        return infoList;
    }


    //查询POS数据
    private List<FsLtfAcctInfo> selectPosInfo(String operDate) {
        FsLtfAcctInfoExample example = new FsLtfAcctInfoExample();
        example.createCriteria().andAcdateEqualTo(operDate);
        FsLtfAcctInfoMapper mapper = session.getMapper(FsLtfAcctInfoMapper.class);
        List<FsLtfAcctInfo> infoList = mapper.selectByExample(example);
        return infoList;
    }

    private List<FsLtfOutAcct> selectUnEqual(String operDate) {
        FsAcctInfoMapper mapper = session.getMapper(FsAcctInfoMapper.class);
        List<FsLtfOutAcct> infoList = mapper.selectUnEqual(operDate);
        return infoList;
    }
    private List<FsLtfRestAcct> selectAcctResult(String operDate) {
        FsAcctInfoMapper mapper = session.getMapper(FsAcctInfoMapper.class);
        List<FsLtfRestAcct> infoList = mapper.selectAcctResult(operDate);
        return infoList;
    }
    private List<FsLtfVchOut> selectDiffOut(String operDate) {
        FsAcctInfoMapper mapper = session.getMapper(FsAcctInfoMapper.class);
        List<FsLtfVchOut> infoList = mapper.selectDiffOut(operDate);
        return infoList;
    }
    private List<FsLtfAcctInfo> selectDiffPos(String operDate) {
        FsAcctInfoMapper mapper = session.getMapper(FsAcctInfoMapper.class);
        List<FsLtfAcctInfo> infoList = mapper.selectDiffPos(operDate);
        return infoList;
    }

    private int updatePosByOrder(String operDate,String orderNo) {
        int res=-1;
        FsAcctInfoMapper mapper = session.getMapper(FsAcctInfoMapper.class);
        res = mapper.updatePosByOrder(operDate,orderNo);

        return res;
    }
    private int updateOutByOrder(String operDate,String orderNo) {
        int res=-1;
        FsAcctInfoMapper mapper = session.getMapper(FsAcctInfoMapper.class);
        res = mapper.updateOutByOrder(operDate,orderNo);
        return res;
    }
}
